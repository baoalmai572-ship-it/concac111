// ƒë∆∞·ª£c code b·ªüi Gemini & Pcoder - Phi√™n b·∫£n cu·ªëi c√πng v15.0
// C·∫≠p nh·∫≠t b·ªüi Pcoder v16.1
// S·ª≠a ƒë·ªïi b·ªüi Gemini - v16.4 - Fix l·ªói spam giao d·ªãch
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// ##### TH√îNG TIN C·∫§U H√åNH B·∫ÆT BU·ªòC #####
const BANK_CONFIG = {
    BANK_ID: "970422", // MB Bank
    ACCOUNT_NO: "5127032006",
    ACCOUNT_NAME: "LE THANH NGHIA"
};
const PAY2S_CONFIG = {
    ACCESS_KEY: "2cc5f1d8237a2ceae854ea5d238f59499f4245a602474bbb83f8c1b5168067ea",
    SECRET_KEY: "99aa1a9aa7f297e594d44a9b2b782eec93442451ca2664ec43dc4b2c0ce85ab3"
};
const PREFIX_CODE = "pcoder";
const EXPIRED_TIME_MINUTE = 5;
// #########################################


// --- Qu·∫£n l√Ω file v√† ƒë∆∞·ªùng d·∫´n ---
const paymentFolder = path.join(__dirname, 'payment');
if (!fs.existsSync(paymentFolder)) fs.mkdirSync(paymentFolder, { recursive: true });

const bankqrCacheFolder = path.join(__dirname, 'bankqr', 'cache');
if (!fs.existsSync(bankqrCacheFolder)) fs.mkdirSync(bankqrCacheFolder, { recursive: true });

const dataFolder = path.join(__dirname, '..', '..', 'data');
if (!fs.existsSync(dataFolder)) fs.mkdirSync(dataFolder, { recursive: true });

const PENDING_FILE = path.join(paymentFolder, 'bank_pending.json');
const USER_TURNS_FILE = path.join(paymentFolder, 'bank_user_turns.json');
// ##### FIX L·ªñI SPAM ##### - T·∫°o file m·ªõi ƒë·ªÉ l∆∞u c√°c giao d·ªãch ƒë√£ ho√†n th√†nh
const COMPLETED_IDS_FILE = path.join(paymentFolder, 'bank_completed_ids.json');
const COMPLETED_LOG_FILE = path.join(dataFolder, 'completed_transactions.log');


// --- C√°c h√†m helper ---
function readJsonFile(filePath, defaultValue = {}) {
    try {
        if (!fs.existsSync(filePath)) {
            const dir = path.dirname(filePath);
            if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
            fs.writeFileSync(filePath, JSON.stringify(defaultValue, null, 2));
            return defaultValue;
        }
        const rawData = fs.readFileSync(filePath);
        return JSON.parse(rawData);
    } catch (error) { return defaultValue; }
}

function writeJsonFile(filePath, data) {
    try {
        const dir = path.dirname(filePath);
        if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
        fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    } catch (error) { console.error(`L·ªói khi ghi file ${filePath}:`, error); }
}

function logCompletedTransaction(data) {
    const logMessage = `[${new Date().toISOString()}] - ${JSON.stringify(data)}\n`;
    fs.appendFileSync(COMPLETED_LOG_FILE, logMessage);
}

async function getUserName(api, Users, uid) {
    try {
        const nameFromCache = (await Users.getData(uid))?.name;
        if (nameFromCache) return nameFromCache;
    } catch (error) {}
    try {
        const infoFromApi = await api.getUserInfo(uid);
        if (infoFromApi && infoFromApi[uid] && infoFromApi[uid].name) return infoFromApi[uid].name;
    } catch (error) {}
    try {
        const profileUrl = `https://www.facebook.com/profile.php?id=${uid}`;
        const res = await axios.get(`https://ffb.vn/api/tool/get-id-fb?idfb=${encodeURIComponent(profileUrl)}`);
        if (res.data.error === 0 && res.data.name) return res.data.name;
    } catch (e) {}
    return `Ng∆∞·ªùi d√πng ${uid}`;
}

let bankingApi;

module.exports = {
    config: {
        name: "bankqr",
        version: "16.4-SpamFix",
        author: "Gemini & Pcoder",
        description: "T·∫°o QR ƒë·ªÉ n·∫°p l∆∞·ª£t v√† t·ª± ƒë·ªông ƒë·ªïi bi·ªát danh theo s·ªë l∆∞·ª£t.",
        commandCategory: "Ti·ªán √≠ch",
        usages: ".bankqr [s·ªë ti·ªÅn]",
        cooldowns: 20
    },
    
    onLoad: function({ api }) {
        bankingApi = api;

        setInterval(async () => {
            if (!bankingApi) return;

            let pending = readJsonFile(PENDING_FILE);
            if (Object.keys(pending).length === 0) return;

            // ##### FIX L·ªñI SPAM ##### - ƒê·ªçc "s·ªï ghi nh·ªõ" c√°c giao d·ªãch ƒë√£ ho√†n th√†nh
            let completedIds = new Set(readJsonFile(COMPLETED_IDS_FILE, []));
            let hasPendingChanges = false;
            let hasCompletedChanges = false;

            try {
                const now = Date.now();
                for (const content in pending) {
                    if (now - pending[content].createdAt > EXPIRED_TIME_MINUTE * 60 * 1000) {
                        delete pending[content];
                        hasPendingChanges = true;
                        console.log(`[BANKING] ƒê√£ x√≥a giao d·ªãch h·∫øt h·∫°n: ${content}`);
                    }
                }

                const today = new Date();
                const formattedDate = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}/${today.getFullYear()}`;
                const pay2sToken = Buffer.from(PAY2S_CONFIG.SECRET_KEY).toString('base64');
                const response = await axios.post('https://my.pay2s.vn/userapi/transactions', {
                    bankAccounts: [BANK_CONFIG.ACCOUNT_NO],
                    begin: formattedDate,
                    end: formattedDate
                }, {
                    headers: { 'Content-Type': 'application/json', 'pay2s-access-key': PAY2S_CONFIG.ACCESS_KEY, 'pay2s-token': pay2sToken }
                });
                
                if (!response.data || !response.data.transactions) return;
                
                const history = response.data.transactions;
                for (const content in pending) {
                    const txData = pending[content];
                    const foundTx = history.find(transaction => 
                        transaction.description.toLowerCase().includes(content.toLowerCase()) && 
                        transaction.amount === txData.amount &&
                        transaction.type === 'IN'
                    );

                    if (foundTx) {
                        // ##### FIX L·ªñI SPAM ##### - Ki·ªÉm tra xem giao d·ªãch n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥ ch∆∞a
                        if (completedIds.has(foundTx.transaction_id)) {
                            // ƒê√£ x·ª≠ l√Ω r·ªìi -> x√≥a kh·ªèi danh s√°ch ch·ªù v√† b·ªè qua
                            delete pending[content];
                            hasPendingChanges = true;
                            console.log(`[BANKING] B·ªè qua giao d·ªãch ƒë√£ x·ª≠ l√Ω: ${foundTx.transaction_id}`);
                            continue; // Chuy·ªÉn sang giao d·ªãch ch·ªù ti·∫øp theo
                        }

                        const { senderID, amount, threadID } = txData;
                        const currentSenderName = await getUserName(bankingApi, global.Users, senderID);
                        const turnsToAdd = Math.floor(amount / 1000);

                        if (turnsToAdd > 0) {
                            let userData = readJsonFile(USER_TURNS_FILE, {});
                            userData[senderID] = (userData[senderID] || 0) + turnsToAdd;
                            writeJsonFile(USER_TURNS_FILE, userData);
                            const newTotalTurns = userData[senderID];
                            
                            const successMsgBody = `üéâ Giao d·ªãch th√†nh c√¥ng!\n- Ng∆∞·ªùi d√πng: @${currentSenderName}\n- S·ªë ti·ªÅn n·∫°p: ${amount.toLocaleString('vi-VN')} VND\n- S·ªë l∆∞·ª£t ƒë∆∞·ª£c c·ªông: +${turnsToAdd} l∆∞·ª£t\n- T·ªïng l∆∞·ª£t hi·ªán t·∫°i: ${newTotalTurns} l∆∞·ª£t.`;
                            
                            bankingApi.sendMessage({ body: successMsgBody, mentions: [{ tag: `@${currentSenderName}`, id: senderID }] }, threadID);

                            const newNickname = `${currentSenderName} ${newTotalTurns} l∆∞·ª£t`;
                            bankingApi.changeNickname(newNickname, threadID, senderID, (err) => {
                                if (err) {
                                    console.error(`[BANKING] L·ªói ƒë·ªïi bi·ªát danh: `, err.errorDescription);
                                    bankingApi.sendMessage(`(i) Kh√¥ng th·ªÉ t·ª± ƒë·ªông ƒë·∫∑t bi·ªát danh cho b·∫°n. L√Ω do c√≥ th·ªÉ l√† bot kh√¥ng c√≥ quy·ªÅn Qu·∫£n tr·ªã vi√™n.`, threadID);
                                }
                            });

                            logCompletedTransaction({ ...txData, transaction_id: foundTx.transaction_id });
                        }
                        
                        // ##### FIX L·ªñI SPAM ##### - Ghi nh·ªõ ID giao d·ªãch n√†y v√†o "s·ªï"
                        completedIds.add(foundTx.transaction_id);
                        hasCompletedChanges = true;

                        delete pending[content];
                        hasPendingChanges = true;
                    }
                }
            } catch (error) {
                 if (error.response) console.error("[BANKING PAY2S] L·ªói API:", error.response.status, error.response.data);
                 else console.error("[BANKING PAY2S] L·ªói kh√¥ng x√°c ƒë·ªãnh:", error.message);
            } finally {
                if (hasPendingChanges) writeJsonFile(PENDING_FILE, pending);
                if (hasCompletedChanges) writeJsonFile(COMPLETED_IDS_FILE, Array.from(completedIds));
            }
        }, 20000);
    },

    run: async function({ api, event, args, Users }) {
        // ... (Ph·∫ßn run kh√¥ng thay ƒë·ªïi, v√¨ n√≥ ƒë√£ ho·∫°t ƒë·ªông ƒë√∫ng) ...
        bankingApi = api;
        const { threadID, messageID, senderID } = event;
        const senderName = await getUserName(api, Users, senderID);
        const amount = parseInt(args[0]);
        if (isNaN(amount) || amount < 1000) {
            return api.sendMessage("‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë ti·ªÅn h·ª£p l·ªá (t·ªëi thi·ªÉu 1,000 VND ƒë·ªÉ ƒë·ªïi l·∫•y l∆∞·ª£t).", threadID, messageID);
        }
        const transactionCode = Math.random().toString(36).substring(2, 8).toUpperCase();
        const content = `${PREFIX_CODE}${transactionCode}`;
        try {
            api.sendMessage("‚è≥ ƒêang kh·ªüi t·∫°o giao d·ªãch, vui l√≤ng ch·ªù trong gi√¢y l√°t...", threadID, messageID);
            const qrResponse = await axios.post('https://api.vietqr.io/v2/generate', { 
                acqId: BANK_CONFIG.BANK_ID, 
                accountNo: BANK_CONFIG.ACCOUNT_NO, 
                accountName: BANK_CONFIG.ACCOUNT_NAME, 
                amount: amount, 
                addInfo: content, 
                template: "compact2" 
            });
            if (!qrResponse.data?.data?.qrDataURL) throw new Error("API VietQR kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu QR h·ª£p l·ªá.");
            const qrDataURL = qrResponse.data.data.qrDataURL;
            const imageBuffer = Buffer.from(qrDataURL.split(',')[1], 'base64');
            const imagePath = path.join(bankqrCacheFolder, `${content}.png`);
            fs.writeFileSync(imagePath, imageBuffer);
            const pending = readJsonFile(PENDING_FILE);
            pending[content] = { senderID, amount, threadID, senderName, createdAt: Date.now() };
            writeJsonFile(PENDING_FILE, pending);
            const turnsToGet = Math.floor(amount / 1000);
            const msg = { 
                body: `‚úÖ Giao d·ªãch c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o!\n\n- Ng√¢n h√†ng: ${BANK_CONFIG.ACCOUNT_NAME}\n- STK: ${BANK_CONFIG.ACCOUNT_NO}\n- S·ªë ti·ªÅn: ${amount.toLocaleString('vi-VN')} VND (s·∫Ω nh·∫≠n ƒë∆∞·ª£c ${turnsToGet} l∆∞·ª£t)\n- N·ªôi dung: ${content}\n\n‚ö†Ô∏è Vui l√≤ng qu√©t m√£ QR v√† **CHUY·ªÇN KHO·∫¢N ƒê√öNG N·ªòI DUNG**. Giao d·ªãch s·∫Ω t·ª± h·ªßy sau ${EXPIRED_TIME_MINUTE} ph√∫t.`, 
                attachment: fs.createReadStream(imagePath) 
            };
            api.sendMessage(msg, threadID, (err) => {
                if (err) console.error(err);
                if (fs.existsSync(imagePath)) fs.unlinkSync(imagePath);
            });
        } catch (error) {
            console.error("[BANKING] L·ªói khi t·∫°o QR:", error.response?.data || error.message);
            api.sendMessage("‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o m√£ QR. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
        }
    }
};

const fs = require('fs');
const request = require('request');

module.exports.config = {
    name: "sendnoti",
    version: "3.1.0",
    hasPermssion: 2,
    credits: "pcoder",
    description: "G·ª≠i tin nh·∫Øn + video t·ª´ admin t·ªõi t·∫•t c·∫£ nh√≥m, h·ªó tr·ª£ ph·∫£n h·ªìi hai chi·ªÅu",
    commandCategory: "Ti·ªán √≠ch",
    usages: "[n·ªôi dung]",
    cooldowns: 5,
};

let atmDir = [];

// T·∫£i v√† ƒë√≠nh k√®m file ph∆∞∆°ng ti·ªán (·∫£nh/video) t·ª´ attachment Facebook
const getAtm = (atm, body) => new Promise(async (resolve) => {
    let msg = {}, attachment = [];
    msg.body = body;
    for (let eachAtm of atm) {
        await new Promise((res) => {
            try {
                let stream = request.get(eachAtm.url);
                stream.on('response', (response) => {
                    let pathName = response.request.uri.pathname;
                    let ext = pathName.substring(pathName.lastIndexOf('.') + 1) || 'jpg';
                    let filePath = __dirname + `/cache/${eachAtm.filename || Date.now()}.${ext}`;
                    stream.pipe(fs.createWriteStream(filePath))
                        .on("finish", () => {
                            attachment.push(fs.createReadStream(filePath));
                            atmDir.push(filePath);
                            res();
                        })
                        .on("error", err => {
                            console.log("L·ªói ghi file attachment:", err);
                            res();
                        });
                });
            } catch (e) {
                console.log("L·ªói t·∫£i attachment:", e);
                res();
            }
        });
    }
    msg.attachment = attachment;
    resolve(msg);
});

module.exports.handleReply = async function ({ api, event, handleReply, Users, Threads }) {
    const moment = require("moment-timezone");
    const gio = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY - HH:mm:ss");
    const { threadID, messageID, senderID, body } = event;
    let name = await Users.getNameUser(senderID);
    switch (handleReply.type) {
        case "sendnoti": {
            let msgText = `====== [ ùó£ùóµùóÆÃâùóª ùóµùóºÃÇÃÄùó∂ ùòÅùòÇÃõÃÄ ùó®ùòÄùó≤ùóø ] ======\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n„Äé‚è±„Äèùêìùê¢ùê¶ùêû: ${gio}\n„Äéüìù„ÄèùêçùêºÃ£ùê®Ã£ÃÇùê¢ ùêùùêÆùêßùê†: ${body}\n„Äéüì©„Äèùêèùê°ùêöÃâùêß ùê°ùê®ÃÇÃÄùê¢ ùê≠ùêÆÃõÃÄ ùêîùòÄùó≤ùóø: ${name}  trong nh√≥m ${(await Threads.getInfo(threadID)).threadName || "Unknown"}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬ª„Äéüí¨„ÄèReply tin nh·∫Øn n√†y n·∫øu mu·ªën ph·∫£n h·ªìi t·ªõi User`;
            let msg = msgText;
            if (event.attachments.length > 0) msg = await getAtm(event.attachments, msgText);
            api.sendMessage(msg, handleReply.threadID, (err, info) => {
                atmDir.forEach(each => fs.unlinkSync(each));
                atmDir = [];
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    type: "reply",
                    messageID: info.messageID,
                    messID: messageID,
                    threadID
                });
            });
            break;
        }
        case "reply": {
            let msgText = `==== [ ùë∑ùíâùíÇÃâùíè ùíâùíêÃÇÃÄùíä ùíïùíñÃõÃÄ ùë®ùë´ùë¥ùë∞ùëµ ] ====\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n„Äé‚è±„Äèùêìùê¢ùê¶ùêû: ${gio}\n„Äéüìù„ÄèN·ªôi dung: ${body}\n„Äéüì©„ÄèPh·∫£n h·ªìi t·ª´ Admin: ${name}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬ª ¬ª Reply tin nh·∫Øn n√†y n·∫øu mu·ªën ph·∫£n h·ªìi v·ªÅ Admin üí¨`;
            let msg = msgText;
            if (event.attachments.length > 0) msg = await getAtm(event.attachments, msgText);
            api.sendMessage(msg, handleReply.threadID, (err, info) => {
                atmDir.forEach(each => fs.unlinkSync(each));
                atmDir = [];
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    type: "sendnoti",
                    messageID: info.messageID,
                    threadID
                });
            }, handleReply.messID);
            break;
        }
    }
};

module.exports.run = async function ({ api, event, args, Users }) {
    const moment = require("moment-timezone");
    const gio = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY - HH:mm:ss");
    const { threadID, messageID, senderID, messageReply } = event;

    if (!args[0]) return api.sendMessage("Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o.", threadID);

    let allThread = global.data.allThreadID || [];
    let can = 0, canNot = 0;
    let msgText = `¬ª ùóßùóõùó¢ÃÇùó°ùóö ùóïùóîÃÅùó¢ ùóîùóóùó†ùóúùó° ¬´\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n„Äé‚è∞„ÄèTime: ${gio}\n„Äéüìù„ÄèN·ªôi dung: ${args.join(" ")}\n„Äéüë§„ÄèT·ª´ ADMIN: ${await Users.getNameUser(senderID)}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n„Äéüí¨„ÄèReply tin nh·∫Øn n√†y n·∫øu mu·ªën (ph·∫£n h·ªìi) v·ªÅ ADMIN.`;

    let msg = msgText;
    if (event.type == "message_reply" && messageReply && messageReply.attachments.length > 0) {
        msg = await getAtm(messageReply.attachments, msgText);
    }

    // G·ª≠i t·ªõi t·ª´ng nh√≥m, d√πng Promise.all ƒë·ªÉ ch·ªù g·ª≠i xong v√† tr√°nh resolve qu√° s·ªõm
    await Promise.all(allThread.map(each => new Promise((resolveSend) => {
        api.sendMessage(msg, each, (err, info) => {
            if (err) canNot++;
            else {
                can++;
                atmDir.forEach(each => fs.existsSync(each) && fs.unlinkSync(each));
                atmDir = [];
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    type: "sendnoti",
                    messageID: info.messageID,
                    messID: messageID,
                    threadID: each
                });
            }
            resolveSend();
        });
    })));

    api.sendMessage(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng t·ªõi ${can} nh√≥m.\n‚ùå Kh√¥ng th·ªÉ g·ª≠i t·ªõi ${canNot} nh√≥m.`, threadID);
};
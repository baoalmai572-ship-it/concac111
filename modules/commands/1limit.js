const fs = require('fs');
const path = __dirname + '/cache/limit.json';

module.exports.config = {
    name: "limit",
    version: "1.0.2",
    hasPermssion: 2,
    credits: "D-Jukie (Fixed by Gemini)",
    description: "B·∫≠t/t·∫Øt c√°c nh√≥m l·ªánh cho t·ª´ng nh√≥m chat. (Ch·ªâ Admin Bot)",
    commandCategory: "Admin",
    usages: "",
    cooldowns: 5,
};

// --- ƒê·ªãnh nghƒ©a c√°c nh√≥m l·ªánh --- //
const commandGroups = {
    game: {
        name: "Game",
        commands: ["1key", "1hoso", "tinhdiem", "tinhdiemlogo"]
    },
    anti: {
        name: "Anti",
        commands: ["antiout", "antijoin"]
    },
    autopost: {
        name: "T·ª± ƒê·ªông L√™n B·∫£ng",
        commands: ["custom"]
    }
};

// H√†m ƒë·ªÉ t·∫£i d·ªØ li·ªáu, t·ª± ƒë·ªông t·∫°o file n·∫øu ch∆∞a c√≥
function loadData() {
    if (!fs.existsSync(path)) {
        fs.writeFileSync(path, JSON.stringify({}));
        return {};
    }
    try {
        const data = fs.readFileSync(path, 'utf8');
        return JSON.parse(data);
    } catch (e) {
        return {};
    }
}

// H√†m ƒë·ªÉ l∆∞u d·ªØ li·ªáu
function saveData(data) {
    fs.writeFileSync(path, JSON.stringify(data, null, 4));
}

// H√†m ki·ªÉm tra v√† kh·ªüi t·∫°o c√†i ƒë·∫∑t cho thread
function initializeThreadSettings(threadID, limitData) {
    let settingsUpdated = false;
    if (!limitData[threadID]) {
        limitData[threadID] = {};
        settingsUpdated = true;
    }
    for (const group in commandGroups) {
        if (typeof limitData[threadID][group] === 'undefined') {
            limitData[threadID][group] = true; // M·∫∑c ƒë·ªãnh l√† b·∫≠t
            settingsUpdated = true;
        }
    }
    return settingsUpdated;
}

module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID, senderID } = event;
    const { ADMINBOT } = global.config;

    if (!ADMINBOT.includes(senderID)) {
        return api.sendMessage("‚ö†Ô∏è L·ªánh n√†y ch·ªâ d√†nh cho Admin Bot.", threadID, messageID);
    }

    let limitData = loadData();
    const settingsUpdated = initializeThreadSettings(threadID, limitData);
    if (settingsUpdated) {
        saveData(limitData);
    }

    const threadSettings = limitData[threadID];
    const groupKeys = Object.keys(commandGroups);

    let msg = "==== [ ‚öôÔ∏è C√ÄI ƒê·∫∂T NH√ìM L·ªÜNH ] ====\n";
    let i = 1;
    for (const groupKey of groupKeys) {
        const groupName = commandGroups[groupKey].name;
        const status = threadSettings[groupKey] === false ? "‚ùå T·∫Øt" : "‚úÖ B·∫≠t";
        msg += `${i++}. ${groupName}: ${status}\n`;
    }
    msg += "\nüìå Reply (ph·∫£n h·ªìi) tin nh·∫Øn n√†y k√®m s·ªë th·ª© t·ª± ƒë·ªÉ b·∫≠t/t·∫Øt nh√≥m l·ªánh t∆∞∆°ng ·ª©ng.";

    return api.sendMessage(msg, threadID, (error, info) => {
        global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: senderID,
            threadID: threadID,
            groupKeys: groupKeys
        });
    }, messageID);
};

module.exports.handleReply = async function({ api, event, handleReply }) {
    const { threadID, messageID, body, senderID } = event;
    const { ADMINBOT } = global.config;

    if (senderID !== handleReply.author) {
        return api.sendMessage("üëâ B·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh, kh√¥ng th·ªÉ reply.", threadID, messageID);
    }

    if (!ADMINBOT.includes(senderID)) {
        return api.sendMessage("‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.", threadID, messageID);
    }

    const choice = parseInt(body);
    if (isNaN(choice) || choice < 1 || choice > handleReply.groupKeys.length) {
        return api.sendMessage(`‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn m·ªôt s·ªë t·ª´ 1 ƒë·∫øn ${handleReply.groupKeys.length}.`, threadID, messageID);
    }
    
    let limitData = loadData();
    initializeThreadSettings(threadID, limitData);
    const threadSettings = limitData[threadID];
    
    const groupToToggle = handleReply.groupKeys[choice - 1];
    const groupName = commandGroups[groupToToggle].name;

    threadSettings[groupToToggle] = !(threadSettings[groupToToggle]);
    saveData(limitData);

    api.unsendMessage(handleReply.messageID).catch(e => {});

    let statusMsg = `‚úÖ ƒê√£ ${threadSettings[groupToToggle] ? "B·∫¨T" : "T·∫ÆT"} nh√≥m l·ªánh "${groupName}".\n\n`;
    statusMsg += "==== [ ‚öôÔ∏è TR·∫†NG TH√ÅI HI·ªÜN T·∫†I ] ====\n";
    let i = 1;
    for (const groupKey of handleReply.groupKeys) {
        const currentGroupName = commandGroups[groupKey].name;
        const status = limitData[threadID][groupKey] ? "‚úÖ B·∫≠t" : "‚ùå T·∫Øt";
        statusMsg += `${i++}. ${currentGroupName}: ${status}\n`;
    }

    return api.sendMessage(statusMsg, threadID, messageID);
};

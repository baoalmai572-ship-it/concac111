/**
 * @name boxscrim
 * @version 7.0 (Modular Canvas)
 * @description T·∫°o ·∫£nh scrim. D√πng chung l∆∞·ª£t v√† limit, t√°ch code v·∫Ω ·∫£nh ra c√°c module ri√™ng.
 * @author Gemini
 */

const { registerFont } = require('canvas');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

// G·ªçi 2 module v·∫Ω ·∫£nh m·ªõi
const createLuffyImage = require('./boxscrim/canvas_luffy.js');
const createItachiImage = require('./boxscrim/canvas_itachi.js');

// --- C·∫§U H√åNH T√äN FILE ·∫¢NH N·ªÄN ---
const ITACHI_BG_FILENAME = 'background_itachi.png';
const LUFFY_BG_FILENAME = 'background_luffy.png';

// --- ƒê∆Ø·ªúNG D·∫™N FILE D·ªÆ LI·ªÜU ---
const turnsPath = path.join(__dirname, 'payment', 'bank_user_turns.json');
const limitPath = path.join(__dirname, 'cache', 'limit.json');

let isAssetsReady = false;

// --- C·∫§U TR√öC L·ªÜNH ---
module.exports.config = {
    name: "boxscrim",
    version: "7.0",
    hasPermssion: 0,
    credits: "Gemini",
    description: `T·∫°o ·∫£nh scrim. D√πng chung l∆∞·ª£t v√† limit 'game' v·ªõi l·ªánh tinhdiem.`,
    commandCategory: "game",
    usages: "[luffy/itachi] | [Ti√™u ƒë·ªÅ] | [Lo·∫°i ph√≤ng] | [M·ª©c gi√°] | [D√≤ng 1] | [D√≤ng 2] | [Banking]",
    cooldowns: 20
};

// --- H√ÄM ONLOAD ---
module.exports.onLoad = async function() {
    // ƒê·∫£m b·∫£o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt t·ªìn t·∫°i
    const paymentDir = path.join(__dirname, 'payment');
    if (!fs.existsSync(paymentDir)) fs.mkdirSync(paymentDir, { recursive: true });
    
    const globalCacheDir = path.join(__dirname, "cache");
    if (!fs.existsSync(globalCacheDir)) fs.mkdirSync(globalCacheDir, { recursive: true });

    // Th∆∞ m·ª•c cache ri√™ng c·ªßa l·ªánh boxscrim
    const commandCacheDir = path.join(__dirname, "boxscrim", "cache");
    if (!fs.existsSync(commandCacheDir)) fs.mkdirSync(commandCacheDir, { recursive: true });

    const fontAsset = { url: "https://github.com/google/fonts/raw/main/ofl/prompt/Prompt-Bold.ttf", path: "Prompt-Bold.ttf", family: "Prompt" };
    const fontPath = path.join(commandCacheDir, fontAsset.path);

    if (!fs.existsSync(fontPath)) {
        try {
            const { data } = await axios.get(fontAsset.url, { responseType: 'arraybuffer' });
            fs.writeFileSync(fontPath, data);
        } catch (e) { console.error(`[BOXSCRIM] L·ªói khi t·∫£i font: ${e.message}`); }
    }
    
    try { 
        registerFont(fontPath, { family: fontAsset.family }); 
    } catch (e) { 
        console.error(`[BOXSCRIM] L·ªói ƒëƒÉng k√Ω font: ${e.message}`); 
    }
    
    isAssetsReady = true;
};

// --- H√ÄM RUN ---
module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID, senderID } = event;

    try {
        if (fs.existsSync(limitPath)) {
            const limitData = JSON.parse(fs.readFileSync(limitPath, 'utf8'));
            if (limitData[threadID] && limitData[threadID].game === false) {
                return api.sendMessage("‚ùé Th√°nh ƒê·ªãa C·ªßa B·∫°n Kh√¥ng ƒê∆∞·ª£c Ph√©p D√πng Thu·∫≠t Ch√∫ Trong 'Game'", threadID, messageID);
            }
        }
    } catch (e) {}

    if (!isAssetsReady) return api.sendMessage("‚è≥ T√†i nguy√™n ƒëang ƒë∆∞·ª£c t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t...", threadID, messageID);

    const input = args.join(" ");
    const usageMessage = `‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng:\n${this.config.usages}\n\nV√≠ d·ª•:\n${this.config.name} luffy | BOX CUS LTN | PH√íNG TH∆Ø·ªúNG | 5K - 10K - 15K | 13:00 - 15:00 6K | 20:00 - 22:00 8K | MBBANK 5127032006`;

    if (!input) return api.sendMessage(usageMessage, threadID, messageID);

    const parts = input.split("|").map(p => p.trim());
    const theme = parts[0]?.toLowerCase();

    if (theme !== 'luffy' && theme !== 'itachi') return api.sendMessage(`‚ùå Theme kh√¥ng h·ª£p l·ªá.`, threadID, messageID);
    if (parts.length !== 7) return api.sendMessage(`‚ùå Nh·∫≠p thi·∫øu th√¥ng tin. C·∫ßn 7 m·ª•c, ph√¢n t√°ch b·ªüi '|'.`, threadID, messageID);

    const [_, title, roomType, subtitle, line1, line2, bankingInfo] = parts;

    try {
        if (!fs.existsSync(turnsPath)) fs.writeFileSync(turnsPath, JSON.stringify({}));
        const turnsData = JSON.parse(fs.readFileSync(turnsPath, 'utf-8'));
        const userTurns = turnsData[senderID] || 0;

        if (userTurns <= 0) return api.sendMessage(`üö´ B·∫°n ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng.`, threadID, messageID);

        api.sendMessage(`‚è≥ ƒêang x·ª≠ l√Ω ·∫£nh '${theme}', vui l√≤ng ch·ªù...`, threadID, null, messageID);

        const imageData = { title, roomType, subtitle, line1, line2, bankingInfo };
        let imageBuffer;

        const imageDir = path.join(__dirname, 'boxscrim', 'cache');

        if (theme === 'luffy') {
            imageData.imagePath = path.join(imageDir, LUFFY_BG_FILENAME);
            imageBuffer = await createLuffyImage(imageData);
        } else {
            imageData.imagePath = path.join(imageDir, ITACHI_BG_FILENAME);
            imageBuffer = await createItachiImage(imageData);
        }
        
        const tempImagePath = path.join(__dirname, 'boxscrim', 'cache', `scrim_temp_${Date.now()}.png`);
        fs.writeFileSync(tempImagePath, imageBuffer);
        
        api.sendMessage({
            body: `üéâ ·∫¢nh scrim c·ªßa b·∫°n v·ªõi theme '${theme}' ƒë√£ ƒë∆∞·ª£c t·∫°o!`,
            attachment: fs.createReadStream(tempImagePath)
        }, threadID, async (err) => {
            fs.unlinkSync(tempImagePath);
            if (err) return console.error("[BOXSCRIM] L·ªói khi g·ª≠i ·∫£nh:", err);
            
            try {
                const currentTurnsData = JSON.parse(fs.readFileSync(turnsPath, 'utf-8'));
                const currentUserTurns = currentTurnsData[senderID] || 0;
                
                if (currentUserTurns > 0) {
                    const newTurns = currentUserTurns - 1;
                    currentTurnsData[senderID] = newTurns;
                    fs.writeFileSync(turnsPath, JSON.stringify(currentTurnsData, null, 4), 'utf-8');
                    const userInfo = await api.getUserInfo(senderID);
                    const senderName = userInfo[senderID]?.name || `User_${senderID}`;
                    const newNickname = `${senderName} | ${newTurns} l∆∞·ª£t`;
                    api.changeNickname(newNickname, threadID, senderID);
                }
            } catch (e) {
                console.error("[BOXSCRIM] L·ªói khi tr·ª´ l∆∞·ª£t:", e);
            }
        }, messageID);

    } catch (err) {
        console.error("[BOXSCRIM] L·ªói trong h√†m run:", err);
        return api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o ·∫£nh: ${err.message}.`, threadID, messageID);
    }
};
